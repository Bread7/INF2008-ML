# -*- coding: utf-8 -*-
"""Week02 Lab Student.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkHjrypbGResYGZmZAwOFqIlyBrJAJeo

## Week 02 INF2008 Lab: Introduction to Pandas

There are three main data structures in Pandas: Series, Index and DataFrame. However the most common ones are DataFrame and Series. Hence for this course we will only go through these two data structures. By the end of the lab, you would have learnt the following:

1.1 How to create pandas objects from python list and python dictionary.

1.2. How to create pandas dataframe objects from python list, python dictionary and csv files.

1.3 How to index / slice pandas series and dataframes.

We will first import the necessary libraries. Please import the pandas library as pd.
"""

import pandas as pd

"""### Section 1.1 Pandas Series Object

A Pandas **Series** is a one-dimensional array, very similar to that of a list, or a numpy array. The main difference is the indexes of the Series object need not be numerical indexes, but can be created from another list or array. We illustrate this below:

#### Section 1.1.1 Create Series from List
"""

temp_list = [1, 2, 3, 4, 5]

"""Create a pandas series called temp_series from temp_list."""

temp_series = pd.Series(temp_list)

print(temp_series)
print(temp_series.values)
print(temp_series.index)

"""Print out the value of the series at index 0."""

temp_series[0]

"""Print out the value of the series from index 2 to the end of the series."""

temp_series[2:]

"""Print out the value of the series from index 2 to index 3 (both inclusive) of the series."""

temp_series[2:4]

"""Print out the value of the series from index -3 (inclusive) to index -1 (not inclusive) of the series."""

temp_series[-3:-1]

"""Do note that unlike a typical python list, negative indexing does not work for a series, and you need the colon character."""

temp_series[4:]

"""#### Section 1.1.2 Create Series from List where indices are another List"""

temp_list = [0, 1, 2, 3, 4, 5]
index_list = ['a', 'b', 'c', 'd', 'e', 'f']

"""Create a series known as temp_series with values of temp_list and indexes of index_list."""

temp_series = pd.Series(temp_list, index_list)

print(temp_series)
print(temp_series.values)
print(temp_series.index)

"""We can access the individual values now through their indices. Please access the value with the index value 'd'."""

temp_series['d']

"""Do note that these indices can take any value that we wish to give them. We can give them indices such as:"""

temp_series = pd.Series([0, 1, 2, 3, 4, 5],
                 index=['8046352B', '8573645H', '9729384G', '1583726D', '2093837C', '239485723E'])

print(temp_series)
print(temp_series.values)
print(temp_series.index)

"""#### Section 1.1.3 Create Series from Dictionary"""

electorate_dict = {'Aljunied': 150303,
                   'Ang Mo Kio': 180186,
                   'Bishan': 100036,
                   'Chua Chu Kang': 103231,
                   'East Coast': 120239}

"""Create a series from the dictionary and print out the resulting series."""

dict_series = pd.Series(electorate_dict)
print(dict_series)

"""Print out the number of voters at "Ang Mo Kio"."""

dict_series['Ang Mo Kio']

"""Print out the voters from "Aljunied" to "East Coast" (both inclusive)"""

dict_series['Aljunied':'East Coast']

"""Note this is a bit confusing. The end index is included!!! (as compared to the list where the end index is not included...! Even at the top, the end index is not included...!)

### Section 1.2 Pandas DataFrame Object

A Pandas **DataFrame** can be considered to be a table, with rows, columns and headers.

#### Section 1.2.1 Create DataFrame from List
"""

temp_list = ['honda', 'toyota', 'kia', 'bmw', 'mazda']

"""Create a dataframe called temp_pd and print it out."""

temp_pd = pd.DataFrame(temp_list)
temp_pd

"""If you wish to have the header, you can use the columns keyword. Notice that columns takes a list as the input.

Create a dataframe called temp_pd from temp_list with "car brand" as the columns name. Please ue the columns keyword.

Please print it out.
"""

temp_pd = pd.DataFrame(temp_list)
temp_pd.columns=['car brand']
print(temp_pd)

"""Suppose we have more than one column, every row should be a list.

|car brand|price|
|-|-|
|honda|150000|
etc

Do note that the easier way would be to create the dataframe from a dictionary (see 1.2.2).
"""

temp_list_0 = ['honda', 150000]
temp_list_1 = ['toyota', 130000]
temp_list_2 = ['kia', 100000]
temp_list_3 = ['bmw', 250000]
temp_list_4 = ['mazda', 140000]

temp_list = [temp_list_0, temp_list_1, temp_list_2,temp_list_3, temp_list_4]

temp_pd = pd.DataFrame(temp_list, columns=["car brand", "price"])
temp_pd

"""#### Section 1.2.2 Create DataFrame from Dictionary"""

temp_list = ['honda', 'toyota', 'kia', 'bmw', 'mazda']
temp_dict = {"car brand": temp_list}

"""Create a dataframe called "temp_pd" from temp_dict."""

temp_pd = pd.DataFrame(temp_dict)
temp_pd

"""If we have more than one column:"""

temp_list_0 = ['honda', 'toyota', 'kia', 'bmw', 'mazda']
temp_list_1 = [150000, 130000, 100000, 250000, 140000]

"""Create a dictionary from temp_list_0 and temp_list_1. After that create a pandas dataframe called temp_pd from this dictionary."""

temp_dict = {'car brand': temp_list_0, 'price': temp_list_1}
temp_pd = pd.DataFrame(temp_dict)
print(temp_pd)

"""Print out the columns of the dataframe. You can use the columns keyword or the keys function."""

temp_pd.columns



"""Print out the column "car brand" of the dataframe."""

temp_pd['car brand']

"""#### Section 1.2.3 Create DataFrame from CSV

The most common option you may do is a load DataFrame from csv.
"""

!wget https://www.stats.govt.nz/assets/Uploads/Annual-enterprise-survey/Annual-enterprise-survey-2021-financial-year-provisional/Download-data/annual-enterprise-survey-2021-financial-year-provisional-size-bands-csv.csv

"""The data has been downloaded into a file known as "annual-enterprise-survey-2021-financial-year-provisional-size-bands-csv.csv".

Please use the read_csv function to read from the file.
"""

sample_df = pd.read_csv("annual-enterprise-survey-2021-financial-year-provisional-size-bands-csv.csv")

"""Print out the first five rows with the head function."""

temp_pd.head()

"""### Section 1.3 Pandas DataFrame Indexing / Slicing

Do note that *indexing* refers to columns while *slicing* refers to rows.

#### Section 1.3.1 Default Slicing

Print out the pandas object temp_series.
"""

temp_series = pd.Series([0, 1, 2, 3, 4, 5],
                 index=['8046352B', '8573645H', '9729384G', '1583726D', '2093837C', '239485723E'])
print(temp_series)

"""Print out the values of the series from "8573645H" to "2093837C" (both inclusive)"""

temp_series[1:5]

"""We now have the following variables."""

temp_list_0 = ['honda', 'toyota', 'kia', 'bmw', 'mazda']
temp_list_1 = [150000, 130000, 100000, 250000, 140000]
temp_indexes = ['c0','c1','c2','c3','c4']

"""Let's create a dataframe, with column "car brand" with values from temp_list_0 and column "price" with values of temp_list_1 with an explicit index."""

data = {'car brand': temp_list_0, 'price': temp_list_1}
temp_pd = pd.DataFrame(data, index=temp_indexes)
print(temp_pd)

"""Print temp_pd from "c2" to "c4"."""

temp_pd['c2':'c4']

"""Print temp_pd from index 2 (inclusive) to index 4 (non inclusive)."""

temp_pd['c2':'c3']

"""#### Section 1.3.2 Indexing using loc, iloc

Using indexes may sometimes be confusing, especially with integer indexes.

Hence Pandas has two special attributes, loc and iloc. loc allows for slicing referencing to the explicit index while iloc references that to the numerical index.
"""

temp_pd

"""Use .loc to slice rows from c1 to c4 (inclusive)"""

temp_pd.loc['c1':'c4']

"""Use .loc to slice rows from c1 to c4 (inclusive) indexing only the "car brand" column"""

temp_pd.loc['c1':'c4', ['car brand']]

"""Use .iloc to slice rows from 1 to 3 (non inclusive)"""

temp_pd.iloc[1:3]

"""Use .iloc to slice rows from 1 to 3 (non inclusive) indexing only the "car brand" column"""

temp_pd.iloc[1:3, 0:1]

